General
Generate docs
-push into github wiki?
Use unit test instead of dodgy tests.
Use logger instead of print

Render Module
Picking: render a 1x1 viewport, assign unique colours to each mesh, pull value out of render buffer.
Clipping: add clipping to the view frustrum, important when rendering points / lines with thickness.
http://www.opengl.org/archives/resources/features/KilgardTechniques/oglpitfall/
ViewMatrix: change to use actual matrices rather than GL helpers so point to ray uses single function.

Mesh Module
MD2: optimise interopolation code, perhaps bake N frames between each before hand
MD2: split mesh data from file / frame data, put current frame into the callbacks
OBJ: implement as much of the Wavefront OBJ spec was possible
http://www.martinreddy.net/gfx/3d/OBJ.spec
OBJ: perhaps convert trifans to triangles and draw using pyglet vertexlist
OAI: Clean up OAI partially implemented code
UV_Generators: Add some more commenting, these can be complex.
UV_Generators: Split planar uv_generator into 2 classes, one that uses vertex position, another that uses vertex normals.
Misc: use resource locations - http://www.pyglet.org/doc/programming_guide/loading_resources.html
Provide MipMap wrappers: http://www.opengl.org/archives/resources/features/KilgardTechniques/oglpitfall/

Scene Module
RenderCallbackNode: Call a new callback when context is lost. This will prevent multiple initialisations for shared
callbacks.
SceneNode: make scale inherit across nodes
SceneNode: implement 'set_world_translation' / etc.
SceneNode: implement 'rotate_matrix'.
SceneNode: implement 'rotate_eulers'.
SceneNode: implement 'rotate_about_axis'.
3D text: test pyglet text and add wrappers if needed.
Collision: add AAbounding box
Collision: add bounding box
Collision: implement mouse ray casting into scene
Collision: object picking via AABB
Collision: object picking via BB
Collision: object picking via mesh
SceneManagement: implement octree, requires aa_bounding_box
Lights: add light nodes
Textures: implement mipmaps
Text: Implement text label nodes
Text: Implement billboard and sprite text labels (fixed rotation, facing)
Debug: make debug cube render single sided faces only. Then re-enable on camera_node.
Animation: add animation functionality. Rotate( axis, radians, time )

Spatial: create spatial nodes, AABB, AOBB, SBB, etc
Spatial: create octree / octree nodes (no coupling to Scene Graph)
Spatial: allow rendering via octree (either set 'user data' on the octree or create a subclass of SceneNode and OctreeNode)
Spatial: frustum culling using octree
Spatial: optimise rendering (reduce overdraw) by rendering front to back
Spatial: create encompassing tree, i.e. parent node includes volume of children, easier to implement than octree?

Maths Module
array_index: make this take an N long array and calculate the index dynamically.

UI Module
Use Cocos2d for ui?

Cocos2d
Add support for layer translations, orientation and scale
use glDepthFunc(func) instead of disabling depth test

Examples: Store the meshes in a dictionary, retrieve meshes via name

Unspecified module
Add shader support
Add shadow projections
Add shapes module: box, sphere, torus, cylinder, etc

Voxel: look up kdtree for possible usage
http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree
